        -:    0:Source:E2E_profile1.c
        -:    0:Graph:UT_E2E_profile1.gcno
        -:    0:Data:UT_E2E_profile1.gcda
        -:    0:Runs:7
        -:    1:#include "..\inc\Std_Types.h"
        -:    2:#include "..\inc\crc.h"
        -:    3:#include "..\inc\E2E_profile1.h"
        -:    4:
        -:    5:#define E2E_P01_DATAID_BOTH 0x0
        -:    6:#define E2E_P01_DATAID_ALT 0x1
        -:    7:#define E2E_P01_DATAID_LOW 0x2
        -:    8:#define E2E_P01_DATAID_NIBBLE 0x3
        -:    9:
        -:   10:#define MAX_P01_DATA_LENGTH_IN_BITS    (240)
        -:   11:#define MAX_P01_COUNTER_VALUE          (14)
        -:   12:
        -:   13:
        -:   14:/*Creation of the E2E header*/
        -:   15:/*--------------------------------------------------------------------------------------------*/
        -:   16:
        -:   17:/*----------------------------------------------*/
        7:   18:uint8_t E2E_UpdateCounter(uint8_t Counter) /*increment values in range 0-14 and update counter */
        -:   19:{ 
        7:   20:    return (Counter + 1) % 15; /* Use the Profile 1 value */
        -:   21:}
        -:   22:
        -:   23:/*----------------------------------------------*/
        9:   24:uint8_t CalculateDeltaCounter(uint8_t receivedCounter, uint8_t lastValidCounter)
        -:   25:{
        9:   26:    if (receivedCounter >= lastValidCounter) 
        -:   27:    {
        5:   28:        return receivedCounter - lastValidCounter;
        -:   29:    }
        -:   30:    else 
        -:   31:    {
        4:   32:        return MAX_P01_COUNTER_VALUE + 1 + receivedCounter - lastValidCounter;
        -:   33:    }
        -:   34:}
        -:   35:
        -:   36:/*----------------------------------------------*/
       20:   37:Std_ReturnType CheckConfig(E2E_P01ConfigType* Config) 
        -:   38:{
        -:   39:
        -:   40:    /* Check for NULL pointers */
       20:   41:    if (Config == NULL) 
        -:   42:    {
        3:   43:        return E2E_E_INPUTERR_NULL; /* MISRA exception */
        -:   44:    }
        -:   45:
        -:   46:    /* Check input parameters values */
       17:   47:    if ((Config->DataLength > MAX_P01_DATA_LENGTH_IN_BITS) || (Config->DataLength % 8 != 0)  ||
       16:   48:        (Config->CounterOffset % 4 != 0) || Config->CRCOffset % 8 != 0) 
        -:   49:    {
        2:   50:        return E2E_E_INPUTERR_WRONG; /* MISRA exception */
        -:   51:    }
        -:   52:
        -:   53:    /* Check that input parameters do not overlap and fits into the data array. It is enough to
        -:   54:     * check if the CRC and Counter are in the same byte since the CRC is one byte long */
       15:   55:    if ((Config->CRCOffset + 8 > Config->DataLength) || (Config->CounterOffset + 4 > Config->DataLength) ||
       14:   56:        (Config->CRCOffset/8 == Config->CounterOffset/8)) 
        -:   57:    {
        1:   58:        return E2E_E_INPUTERR_WRONG; /* MISRA exception */
        -:   59:    }
        -:   60:
       14:   61:    return E2E_E_OK;
        -:   62:	
        -:   63:}
        -:   64:
        -:   65:
        -:   66:/*----------------------------------------------*/
        -:   67:/*
        -:   68:[PRS_E2E_00163]
        -:   69:[PRS_E2E_00085]
        -:   70:[PRS_E2E_00085]
        -:   71:[PRS_E2E_00306]
        -:   72:[PRS_E2E_00190]
        -:   73:[PRS_E2E_00082]
        -:   74:[PRS_E2E_00640]
        -:   75:*/
        -:   76:
       14:   77:uint8_t E2E_P01_CalculateCRC(E2E_P01ConfigType* Config, uint8 Counter, uint8* Data)
        -:   78:{
       14:   79:    uint8_t data_id_lo_byte = (uint8_t)(Config->DataID);
       14:   80:    uint8_t data_id_hi_byte = (uint8_t)(Config->DataID>>8);
       14:   81:    uint8_t crc = 0x00u;
        -:   82:
       14:   83:    switch (Config->DataIDMode)
        -:   84:    {
        6:   85:    case E2E_P01_DATAID_BOTH:
        -:   86:
        6:   87:        crc = Crc_CalculateCRC8(&data_id_lo_byte, 1u, CRC8_XOR_VALUE, false);
        6:   88:        crc = Crc_CalculateCRC8(&data_id_hi_byte, 1u, crc, false);
        -:   89:
        6:   90:        break;
        -:   91:
        4:   92:    case E2E_P01_DATAID_LOW:
        -:   93:
        4:   94:        crc = Crc_CalculateCRC8(&data_id_lo_byte, 1u, CRC8_XOR_VALUE, false);
        -:   95:
        4:   96:        break;
        -:   97:
        2:   98:    case E2E_P01_DATAID_ALT:
        -:   99:
        2:  100:        if (Counter % 2 == 0)
        -:  101:        {
        1:  102:            crc = Crc_CalculateCRC8(&data_id_lo_byte, 1u, CRC8_XOR_VALUE, false);
        -:  103:        }
        -:  104:        else
        -:  105:        {
        1:  106:            crc = Crc_CalculateCRC8(&data_id_hi_byte, 1u, CRC8_XOR_VALUE, false);
        -:  107:        }
        -:  108:
        2:  109:        break;
        -:  110:
        1:  111:    case E2E_P01_DATAID_NIBBLE:
        -:  112:
        1:  113:        crc = Crc_CalculateCRC8(&data_id_lo_byte, 1u, CRC8_XOR_VALUE, false);
        -:  114:
        1:  115:        data_id_hi_byte = 0;
        -:  116:
        1:  117:        crc = Crc_CalculateCRC8(&data_id_hi_byte, 1u, crc, false);
        -:  118:
        1:  119:        break;
        -:  120:
        1:  121:    default:
        -:  122:
        1:  123:        crc = Crc_CalculateCRC8(&data_id_hi_byte, 1u, crc, true);
        -:  124:        
        1:  125:        break;
        -:  126:    }    
        -:  127:
       14:  128:    if (Config->CRCOffset >= 8)
        -:  129:    {
        -:  130:        // compute crc over data before the crc byte
        8:  131:        crc = Crc_CalculateCRC8(Data, (Config->CRCOffset / 8), crc ^ CRC8_XOR_VALUE, FALSE);
        -:  132:    }
        -:  133:
       14:  134:    if (Config->CRCOffset / 8 < (Config->DataLength / 8) - 1) 
        -:  135:    {
       11:  136:        crc = Crc_CalculateCRC8 (&Data[Config->CRCOffset/8 + 1], 
       11:  137:                                (Config->DataLength / 8 - Config->CRCOffset / 8 - 1),
        -:  138:                                crc ^ CRC8_XOR_VALUE, FALSE);
        -:  139:    }
        -:  140:
        -:  141:    // write CRC to data
       14:  142:    return crc ^ CRC8_XOR_VALUE;
        -:  143:}
        -:  144:
        -:  145:/*----------------------------------------------*/
        5:  146:Std_ReturnType E2E_P01Protect(E2E_P01ConfigType* Config, E2E_P01SenderStateType* State, uint8_t* Data) 
        -:  147:{
        -:  148:
        5:  149:    Std_ReturnType returnValue = CheckConfig(Config);
        -:  150:
        5:  151:    if (E2E_E_OK != returnValue) 
        -:  152:    {
        1:  153:        return returnValue;
        -:  154:    }
        -:  155:
        4:  156:    if ((State == NULL) || (Data == NULL)) 
        -:  157:    {
        2:  158:        return E2E_E_INPUTERR_NULL; /* MISRA exception */
        -:  159:    }
        -:  160:
        -:  161:    /* write the counter in data*/
        2:  162:    if (Config->CounterOffset % 8 == 0) 
        -:  163:    {
        1:  164:        *(Data+(Config->CounterOffset/8)) = (*(Data+(Config->CounterOffset/8)) & 0xF0) | (State->Counter & 0x0F);
        -:  165:    }
        -:  166:    else 
        -:  167:    { /*write DataID nibble in Data, if E2E_P01_DATAID_NIBBLE configuration is used*/
        1:  168:        *(Data+(Config->CounterOffset/8)) = (*(Data+(Config->CounterOffset/8)) & 0x0F) | ((State->Counter<<4) & 0xF0);
        -:  169:    }
        -:  170:
        -:  171:    /* compute the CRC and write CRC in Data */
        2:  172:    *(Data+(Config->CRCOffset/8)) = E2E_P01_CalculateCRC(Config, State->Counter, Data);
        -:  173:    
        -:  174:    /* increment the Counter (which will be used in the next invocation of E2E_P01Protect()) */
        2:  175:    State->Counter = E2E_UpdateCounter(State->Counter); 
        -:  176:
        2:  177:    return E2E_E_OK;
        -:  178:}
        -:  179:/*--------------------------------------------------------------------------------------------*/
        -:  180:
        -:  181:/*Evaluation of E2E- Header*/
        -:  182:/*--------------------------------------------------------------------------------------------*/
        -:  183:
        -:  184:/*----------------------------------------------*/
       10:  185:Std_ReturnType E2E_P01Check(E2E_P01ConfigType* Config, E2E_P01ReceiverStateType* State, uint8* Data, uint8_t receivedCrc) {
        -:  186:
       10:  187:    uint8 receivedCounter = 0;
       10:  188:    uint8 calculatedCrc = 0;
       10:  189:    uint8 delta = 0;
       10:  190:    Std_ReturnType returnValue = CheckConfig(Config);
        -:  191:
       10:  192:    if (E2E_E_OK != returnValue) {
        1:  193:        return returnValue;
        -:  194:    }
        -:  195:
        9:  196:    if ((State == NULL) || (Data == NULL)) {
        2:  197:        return E2E_E_INPUTERR_NULL; /* MISRA exception */
        -:  198:    }
        -:  199:
        -:  200:    /* This is the stated behavior in figure 7-6 but it seems wrong. This means that if more than 15
        -:  201:     * messages are received with wrong CRC, the first message with correct CRC will be have state
        -:  202:     * OKSOMELOST even though it should be WRONGSEQUENCE.
        -:  203:     */
        7:  204:    if (State->MaxDeltaCounter < MAX_P01_COUNTER_VALUE) {
        6:  205:        State->MaxDeltaCounter++;
        -:  206:    }
        -:  207:
        7:  208:    if (State->NewDataAvailable == FALSE) {
        1:  209:        State->Status = E2E_P01STATUS_NONEWDATA;
        1:  210:        return E2E_E_OK;  /* MISRA exception */
        -:  211:    }
        -:  212:
        -:  213:    /* Counter offset is 4-bit aligned, this check is used to find out if high or low nibble */
        6:  214:    if (Config->CounterOffset % 8 == 0) {
        2:  215:        receivedCounter = *(Data+(Config->CounterOffset/8u)) & 0x0F;
        -:  216:    }
        -:  217:    else {
        4:  218:        receivedCounter = (*(Data+(Config->CounterOffset/8)) >> 4) & 0x0F;
        -:  219:    }
        -:  220:
        6:  221:    calculatedCrc = E2E_P01_CalculateCRC(Config, receivedCounter, Data);
        -:  222:
        6:  223:    if (receivedCrc != calculatedCrc) {
        1:  224:        State->Status = E2E_P01STATUS_WRONGCRC;
        1:  225:        return E2E_E_OK;
        -:  226:    }
        -:  227:
        -:  228:    /* Check if this is the first data since initialization */
        5:  229:    if (State->WaitForFirstData == TRUE) {
        1:  230:        State->WaitForFirstData = FALSE;
        1:  231:        State->MaxDeltaCounter = Config->MaxDeltaCounter;
        1:  232:        State->LastValidCounter = receivedCounter;
        1:  233:        State->Status= E2E_P01STATUS_INITAL;
        1:  234:        return E2E_E_OK;
        -:  235:    }
        -:  236:
        -:  237:    /* Ok, this is the normal case. Check the counter delta */
        4:  238:    delta = CalculateDeltaCounter(receivedCounter, State->LastValidCounter);
        -:  239:
        4:  240:    if (delta == 1) {
        1:  241:        State->MaxDeltaCounter = Config->MaxDeltaCounter;
        1:  242:        State->LastValidCounter = receivedCounter;
        1:  243:        State->LostData = 0;
        1:  244:        State->Status= E2E_P01STATUS_OK;
        -:  245:    }
        3:  246:    else if (delta == 0) {
        1:  247:        State->Status= E2E_P01STATUS_REPEATED;
        -:  248:    }
        2:  249:    else if (delta <= State->MaxDeltaCounter) {
        1:  250:        State->MaxDeltaCounter = Config->MaxDeltaCounter;
        1:  251:        State->LastValidCounter = receivedCounter;
        1:  252:        State->LostData = delta - 1;
        1:  253:        State->Status= E2E_P01STATUS_OKSOMELOST;
        -:  254:    }
        -:  255:    else {
        1:  256:        State->Status= E2E_P01STATUS_WRONGSEQUENCE;
        -:  257:    }
        -:  258:
        4:  259:    return E2E_E_OK;
        -:  260:}
        -:  261:/*--------------------------------------------------------------------------------------------*/
