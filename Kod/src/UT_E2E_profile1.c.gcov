        -:    0:Source:UT_E2E_profile1.c
        -:    0:Graph:UT_E2E_profile1.gcno
        -:    0:Data:UT_E2E_profile1.gcda
        -:    0:Runs:7
        -:    1:/** ==================================================================================================================*\
        -:    2:  @file UT_E2E_profile1.c
        -:    3:
        -:    4:  @brief Testy jednostkowe do E2E_profile1
        -:    5:\**====================================================================================================================*/
        -:    6:#include "..\inc\Std_Types.h"
        -:    7:#include "..\inc\acutest.h"
        -:    8:#include "E2E_profile1.c"
        -:    9:#include "crc.c"
        -:   10:
        -:   11:/**=============================================================================*/
        -:   12:/**
        -:   13:  @brief Test of E2E_P01Protect
        -:   14:**/
        -:   15:/**=============================================================================*/
        1:   16:void Test_Of_E2E_P01Protect(void)
        -:   17:{
        -:   18:    E2E_P01ConfigType Config;
        -:   19:    E2E_P01SenderStateType State;
        1:   20:	uint8_t dataOK[8] = {0, 1, 2, 3, 4, 5, 6, 7};
        1:   21:	uint8_t data[] = {};
        -:   22:	
        1:   23:    TEST_CHECK(E2E_P01Protect(NULL, &State, data) == E2E_E_INPUTERR_NULL);
        -:   24:	
        1:   25:	E2E_P01ConfigType ConfigOK1 = {
        -:   26:        .DataLength = 16,
        -:   27:        .CounterOffset = 4,
        -:   28:        .CRCOffset = 8
        -:   29:    };
        1:   30:    TEST_CHECK(E2E_P01Protect(&ConfigOK1, NULL, data) == E2E_E_INPUTERR_NULL);
        1:   31:    TEST_CHECK(E2E_P01Protect(&ConfigOK1, &State, NULL) == E2E_E_INPUTERR_NULL);
        -:   32:	
        -:   33:	
        1:   34:	Std_ReturnType result = E2E_P01Protect(&ConfigOK1, &State, dataOK);
        -:   35:	
        1:   36:	TEST_CHECK(result == E2E_E_OK);
        1:   37:	TEST_CHECK(dataOK[ConfigOK1.CounterOffset / 8] == 0);
        1:   38:	TEST_CHECK(dataOK[ConfigOK1.CRCOffset / 8] == 79);
        -:   39:	
        1:   40:	E2E_P01ConfigType ConfigOK2 = {
        -:   41:        .DataLength = 32,
        -:   42:        .CounterOffset = 16,
        -:   43:        .CRCOffset = 24
        -:   44:    };
        -:   45:	
        1:   46:	result = E2E_P01Protect(&ConfigOK2, &State, dataOK);
        -:   47:	
        1:   48:	TEST_CHECK(result == E2E_E_OK);
        1:   49:	TEST_CHECK(dataOK[ConfigOK2.CounterOffset / 8] == 1);
        1:   50:	TEST_CHECK(dataOK[ConfigOK2.CRCOffset / 8] == 29);
        1:   51:}
        -:   52:
        -:   53:
        -:   54:/**=============================================================================*/
        -:   55:/**
        -:   56:  @brief Test of E2E_P01Check
        -:   57:**/
        -:   58:/**=============================================================================*/
        1:   59:void Test_Of_E2E_P01Check(void)
        -:   60:{
        -:   61:
        -:   62://---------------------------------
        -:   63:  E2E_P01ConfigType Config;
        -:   64:  E2E_P01ReceiverStateType State;
        -:   65:  E2E_P01SenderStateType StateProtect;
        1:   66:  uint8_t dataOK[8] = {0, 1, 2, 3, 4, 5, 6, 7};
        1:   67:	uint8_t data[] = {0};
        -:   68:
        1:   69:  TEST_CHECK(E2E_P01Check(NULL, &State, data, 0) == E2E_E_INPUTERR_NULL);
        -:   70:	
        1:   71:	E2E_P01ConfigType ConfigOK1 = {
        -:   72:        .DataLength = 16,
        -:   73:        .CounterOffset = 4,
        -:   74:        .CRCOffset = 8
        -:   75:    };
        -:   76:
        -:   77://---------------------------------
        1:   78:  TEST_CHECK(E2E_P01Check(&ConfigOK1, NULL, data, 0) == E2E_E_INPUTERR_NULL);
        -:   79://---------------------------------
        1:   80:  TEST_CHECK(E2E_P01Check(&ConfigOK1, &State, NULL, 0) == E2E_E_INPUTERR_NULL);
        -:   81:	
        1:   82:	Std_ReturnType result = E2E_P01Check(&ConfigOK1, &State, dataOK, 0);
        -:   83:
        -:   84://---------------------------------
        1:   85:	TEST_CHECK(result == E2E_E_OK);
        -:   86://---------------------------------
        1:   87:	TEST_CHECK(dataOK[ConfigOK1.CounterOffset / 8] == 0);
        -:   88://---------------------------------
        1:   89:	E2E_P01ConfigType ConfigOK2 = {
        -:   90:        .DataLength = 32,
        -:   91:        .CounterOffset = 16,
        -:   92:        .CRCOffset = 0
        -:   93:    };
        -:   94:	
        1:   95:  E2E_P01ReceiverStateType State2 = {
        -:   96:    .LastValidCounter = 1,
        -:   97:    .MaxDeltaCounter = 2,
        -:   98:    .WaitForFirstData = 0,
        -:   99:    .NewDataAvailable = 1,
        -:  100:    .LostData = 0
        -:  101:  };
        -:  102:
        1:  103:	result = E2E_P01Check(&ConfigOK2, &State2, dataOK, 121);
        1:  104:	TEST_CHECK(result == E2E_E_OK);
        -:  105:
        -:  106://---------------------------------
        1:  107:	E2E_P01ConfigType ConfigOK3 = {
        -:  108:        .DataLength = 32,
        -:  109:        .CounterOffset = 16,
        -:  110:        .CRCOffset = 8
        -:  111:    };
        -:  112:	
        1:  113:  E2E_P01ReceiverStateType State3 = {
        -:  114:    .LastValidCounter = 1,
        -:  115:    .MaxDeltaCounter = 2,
        -:  116:    .WaitForFirstData = 1,
        -:  117:    .NewDataAvailable = 1,
        -:  118:    .LostData = 0
        -:  119:  };
        -:  120:
        1:  121:	result = E2E_P01Check(&ConfigOK3, &State3, dataOK, 246);
        -:  122:	
        1:  123:	TEST_CHECK(result == E2E_E_OK);
        -:  124://---------------------------------
        1:  125:	E2E_P01ConfigType ConfigOK4 = {
        -:  126:        .DataLength = 32,
        -:  127:        .CounterOffset = 4,
        -:  128:        .CRCOffset = 16
        -:  129:    };
        -:  130:	
        1:  131:  E2E_P01ReceiverStateType State4 = {
        -:  132:    .LastValidCounter = 1,
        -:  133:    .MaxDeltaCounter = 2,
        -:  134:    .WaitForFirstData = 0,
        -:  135:    .NewDataAvailable = 1,
        -:  136:    .LostData = 0
        -:  137:  };
        -:  138:
        1:  139:	result = E2E_P01Check(&ConfigOK4, &State4, dataOK, 34);
        -:  140:	
        1:  141:	TEST_CHECK(result == E2E_E_OK);
        -:  142://---------------------------------
        1:  143:	E2E_P01ConfigType ConfigOK5 = {
        -:  144:    .DataLength = 32,
        -:  145:    .CounterOffset = 4,
        -:  146:    .CRCOffset = 16,
        -:  147:    .DataID = 256,
        -:  148:    .DataIDMode = E2E_P01_DATAID_LOW,
        -:  149:    .MaxDeltaCounter = 0
        -:  150:
        -:  151:  };
        -:  152:	
        1:  153:  E2E_P01ReceiverStateType State5 = {
        -:  154:    .LastValidCounter = 0,
        -:  155:    .MaxDeltaCounter = 0,
        -:  156:    .WaitForFirstData = 0,
        -:  157:    .NewDataAvailable = 1,
        -:  158:    .LostData = 0
        -:  159:  };
        -:  160:
        1:  161:	Std_ReturnType result5 = E2E_P01Check(&ConfigOK5, &State5, data, 156);
        -:  162:	
        1:  163:	TEST_CHECK(result5 == E2E_E_OK);
        -:  164:
        -:  165://---------------------------------
        1:  166:	E2E_P01ConfigType ConfigOK6 = {
        -:  167:    .DataLength = 32,
        -:  168:    .CounterOffset = 4,
        -:  169:    .CRCOffset = 16,
        -:  170:    .DataID = 256,
        -:  171:    .DataIDMode = E2E_P01_DATAID_LOW,
        -:  172:    .MaxDeltaCounter  = 0
        -:  173:
        -:  174:  };
        -:  175:	
        1:  176:  E2E_P01ReceiverStateType State6 = {
        -:  177:    .LastValidCounter = 1,
        -:  178:    .MaxDeltaCounter = 2,
        -:  179:    .WaitForFirstData = 0,
        -:  180:    .NewDataAvailable = 1,
        -:  181:    .LostData = 0
        -:  182:  };
        -:  183:
        1:  184:	Std_ReturnType result6 = E2E_P01Check(&ConfigOK6, &State6, data, 0);
        -:  185:	
        1:  186:	TEST_CHECK(result6 == E2E_E_OK);
        -:  187:
        -:  188://---------------------------------
        1:  189:	E2E_P01ConfigType ConfigOK7 = {
        -:  190:    .DataLength = 32,
        -:  191:    .CounterOffset = 4,
        -:  192:    .CRCOffset = 16,
        -:  193:    .DataID = 256,
        -:  194:    .DataIDMode = E2E_P01_DATAID_LOW,
        -:  195:    .MaxDeltaCounter = 0
        -:  196:
        -:  197:  };
        -:  198:	
        1:  199:  E2E_P01ReceiverStateType State7 = {
        -:  200:    .LastValidCounter = 3,
        -:  201:    .MaxDeltaCounter = 24,
        -:  202:    .WaitForFirstData = 0,
        -:  203:    .NewDataAvailable = 1,
        -:  204:    .LostData = 0
        -:  205:  };
        -:  206:
        1:  207:	Std_ReturnType result7 = E2E_P01Check(&ConfigOK7, &State7, data, 156);
        -:  208:	
        1:  209:	TEST_CHECK(result7 == E2E_E_OK);
        -:  210:
        1:  211:}
        -:  212:
        -:  213:/**=============================================================================*/
        -:  214:/**
        -:  215:  @brief Test of E2E_P01_CalculateCRC
        -:  216:**/
        -:  217:/**=============================================================================*/
        1:  218:void Test_Of_E2E_P01_CalculateCRC(void)
        -:  219:{
        -:  220:	
        -:  221:	E2E_P01ConfigType Config;
        1:  222:  Config.CounterOffset = 3 * 8;
        1:  223:	Config.CRCOffset = 0;
        1:  224:	Config.DataIDMode = E2E_P01_DATAID_BOTH;
        1:  225:	Config.DataLength = 2 * 8;
        1:  226:	Config.MaxDeltaCounter = 3;
        1:  227:  Config.DataID = 256;
        -:  228:
        1:  229:	uint8_t data[8] = {0, 1, 2, 3, 4, 5, 6, 7};
        1:  230:	uint8_t crcResult = E2E_P01_CalculateCRC(&Config, 0, data);
        1:  231:	TEST_CHECK(crcResult == 30);
        -:  232:
        1:  233:	Config.DataIDMode = E2E_P01_DATAID_LOW;
        1:  234:	crcResult = E2E_P01_CalculateCRC(&Config, 0, data);
        1:  235:	TEST_CHECK(crcResult == 92);
        -:  236:	
        1:  237:	Config.DataIDMode = E2E_P01_DATAID_ALT;
        1:  238:	crcResult = E2E_P01_CalculateCRC(&Config, 0, data);
        1:  239:	TEST_CHECK(crcResult == 92);
        -:  240:	
        1:  241:	Config.DataIDMode = E2E_P01_DATAID_ALT;
        1:  242:	crcResult = E2E_P01_CalculateCRC(&Config, 1, data);
        1:  243:	TEST_CHECK(crcResult == 16);
        -:  244:	
        1:  245:	Config.DataIDMode = E2E_P01_DATAID_NIBBLE;
        1:  246:	crcResult = E2E_P01_CalculateCRC(&Config, 0, data);
        1:  247:	TEST_CHECK(crcResult == 82);
        -:  248:	
        1:  249:  Config.DataIDMode = 22;
        1:  250:	Config.CRCOffset = 8;
        1:  251:	crcResult = E2E_P01_CalculateCRC(&Config, 0, data);
        1:  252:	TEST_CHECK(crcResult == 13);
        -:  253:	
        1:  254:}
        -:  255:
        -:  256:/**=============================================================================*/
        -:  257:/**
        -:  258:  @brief Test of E2E_UpdateCounter
        -:  259:**/
        -:  260:/**=============================================================================*/
        1:  261:void Test_Of_E2E_UpdateCounter(void)
        -:  262:{
        -:  263:    /* Test for valid range 0-14 */
        1:  264:    TEST_CHECK(E2E_UpdateCounter(0) == 1);
        1:  265:    TEST_CHECK(E2E_UpdateCounter(7) == 8);
        1:  266:    TEST_CHECK(E2E_UpdateCounter(14) == 0);
        -:  267:
        -:  268:    /* Test for invalid input (greater than 14) */
        1:  269:    TEST_CHECK(E2E_UpdateCounter(15) == 1);
        1:  270:    TEST_CHECK(E2E_UpdateCounter(20) == 6);
        1:  271:}
        -:  272:
        -:  273:/**=============================================================================*/
        -:  274:/**
        -:  275:  @brief Test of CalculateDeltaCounter
        -:  276:**/
        -:  277:/**=============================================================================*/
        1:  278:void Test_Of_CalculateDeltaCounter(void)
        -:  279:{
        -:  280:    /* Test for receivedCounter >= lastValidCounter */
        1:  281:    TEST_CHECK(CalculateDeltaCounter(8, 5) == 3);
        1:  282:    TEST_CHECK(CalculateDeltaCounter(5, 5) == 0);
        1:  283:    TEST_CHECK(CalculateDeltaCounter(0, 14) == 1);
        -:  284:
        -:  285:    /* Test for receivedCounter < lastValidCounter */
        1:  286:    TEST_CHECK(CalculateDeltaCounter(5, 8) == 12);
        1:  287:    TEST_CHECK(CalculateDeltaCounter(14, 0) == 14);
        1:  288:}
        -:  289:
        -:  290:/**=============================================================================*/
        -:  291:/**
        -:  292:  @brief Test for CheckConfig with NULL Config
        -:  293:**/
        -:  294:/**=============================================================================*/
        1:  295:void Test_CheckConfig(void) {
        1:  296:    Std_ReturnType result = CheckConfig(NULL);
        1:  297:    TEST_CHECK(result == E2E_E_INPUTERR_NULL);
        -:  298:
        1:  299:    E2E_P01ConfigType ConfigOK = {
        -:  300:        .DataLength = 16,
        -:  301:        .CounterOffset = 4,
        -:  302:        .CRCOffset = 8
        -:  303:    };
        -:  304:
        1:  305:    result = CheckConfig(&ConfigOK);
        1:  306:    TEST_CHECK(result == E2E_E_OK);
        -:  307:
        1:  308:    E2E_P01ConfigType ConfigInvalidDataLength = {
        -:  309:        .DataLength = 17,
        -:  310:        .CounterOffset = 4,
        -:  311:        .CRCOffset = 8
        -:  312:    };
        -:  313:
        1:  314:    result = CheckConfig(&ConfigInvalidDataLength);
        1:  315:    TEST_CHECK(result == E2E_E_INPUTERR_WRONG);
        -:  316:
        1:  317:    E2E_P01ConfigType ConfigInvalidCounterOffset = {
        -:  318:        .DataLength = 16,
        -:  319:        .CounterOffset = 3,
        -:  320:        .CRCOffset = 8
        -:  321:    };
        -:  322:
        1:  323:    result = CheckConfig(&ConfigInvalidCounterOffset);
        1:  324:    TEST_CHECK(result == E2E_E_INPUTERR_WRONG);
        -:  325:
        1:  326:    E2E_P01ConfigType ConfigOverlappingOffsets = {
        -:  327:        .DataLength = 0,
        -:  328:        .CounterOffset = 16,
        -:  329:        .CRCOffset = 16
        -:  330:    };
        -:  331:
        1:  332:    result = CheckConfig(&ConfigOverlappingOffsets);
        1:  333:    TEST_CHECK(result == E2E_E_INPUTERR_WRONG);
        1:  334:}
        -:  335:
        -:  336:/**=============================================================================*/
        -:  337:/*
        -:  338:  Lista testów 
        -:  339:*/
        -:  340:/**=============================================================================*/
        -:  341:TEST_LIST = 
        -:  342:{
        -:  343:  { "Test of E2E_P01Protect", Test_Of_E2E_P01Protect },
        -:  344:  { "Test of E2E_P01Check", Test_Of_E2E_P01Check },
        -:  345:  { "Test of Test_Of_E2E_P01_CalculateCRC", Test_Of_E2E_P01_CalculateCRC },
        -:  346:	{ "Test of E2E_UpdateCounter", Test_Of_E2E_UpdateCounter },
        -:  347:	{ "Test of CalculateDeltaCounter", Test_Of_CalculateDeltaCounter },
        -:  348:	{ "Test of CheckConfig", Test_CheckConfig },
        -:  349:  { NULL, NULL }                                      
        -:  350:};
