        -:    0:Source:UT_E2E_profile1.c
        -:    0:Graph:UT_E2E_profile1.gcno
        -:    0:Data:UT_E2E_profile1.gcda
        -:    0:Runs:7
        -:    1:/** ==================================================================================================================*\
        -:    2:  @file UT_E2E_profile1.c
        -:    3:
        -:    4:  @brief Testy jednostkowe do E2E_profile1
        -:    5:\**====================================================================================================================*/
        -:    6:#include "..\inc\Std_Types.h"
        -:    7:#include "..\inc\acutest.h"
        -:    8:#include "E2E_profile1.c"
        -:    9:#include "crc.c"
        -:   10:
        -:   11:/**=============================================================================*/
        -:   12:/**
        -:   13:  @brief Test of E2E_P01Protect
        -:   14:**/
        -:   15:/**=============================================================================*/
        1:   16:void Test_Of_E2E_P01Protect(void)
        -:   17:{
        -:   18:    E2E_P01ConfigType Config;
        -:   19:    E2E_P01SenderStateType State;
        1:   20:	uint8_t dataOK[8] = {0, 1, 2, 3, 4, 5, 6, 7};
        1:   21:	uint8_t data[] = {};
        -:   22:	
        1:   23:    TEST_CHECK(E2E_P01Protect(NULL, &State, data) == E2E_E_INPUTERR_NULL);
        -:   24:	
        1:   25:	E2E_P01ConfigType ConfigOK1 = {
        -:   26:        .DataLength = 16,
        -:   27:        .CounterOffset = 4,
        -:   28:        .CRCOffset = 8
        -:   29:    };
        1:   30:    TEST_CHECK(E2E_P01Protect(&ConfigOK1, NULL, data) == E2E_E_INPUTERR_NULL);
        1:   31:    TEST_CHECK(E2E_P01Protect(&ConfigOK1, &State, NULL) == E2E_E_INPUTERR_NULL);
        -:   32:	
        -:   33:	
        1:   34:	Std_ReturnType result = E2E_P01Protect(&ConfigOK1, &State, dataOK);
        -:   35:	
        1:   36:	TEST_CHECK(result == E2E_E_OK);
        1:   37:	TEST_CHECK(dataOK[ConfigOK1.CounterOffset / 8] == 0);
        1:   38:	TEST_CHECK(dataOK[ConfigOK1.CRCOffset / 8] == 196);
        -:   39:	
        1:   40:	E2E_P01ConfigType ConfigOK2 = {
        -:   41:        .DataLength = 32,
        -:   42:        .CounterOffset = 16,
        -:   43:        .CRCOffset = 24
        -:   44:    };
        -:   45:	
        1:   46:	result = E2E_P01Protect(&ConfigOK2, &State, dataOK);
        -:   47:	
        1:   48:	TEST_CHECK(result == E2E_E_OK);
        1:   49:	TEST_CHECK(dataOK[ConfigOK2.CounterOffset / 8] == 1);
        1:   50:	TEST_CHECK(dataOK[ConfigOK2.CRCOffset / 8] == 29);
        1:   51:}
        -:   52:
        -:   53:/**=============================================================================*/
        -:   54:/**
        -:   55:  @brief Test of E2E_P01Check
        -:   56:**/
        -:   57:/**=============================================================================*/
        1:   58:void Test_Of_E2E_P01Check(void)
        -:   59:{
        -:   60:
        -:   61://---------------------------------
        -:   62:  E2E_P01ConfigType Config;
        -:   63:  E2E_P01ReceiverStateType State;
        1:   64:  uint8_t dataOK[8] = {0, 1, 2, 3, 4, 5, 6, 7};
        1:   65:	uint8_t data[] = {0};
        -:   66:
        1:   67:  TEST_CHECK(E2E_P01Check(NULL, &State, data) == E2E_E_INPUTERR_NULL);
        -:   68:	
        1:   69:	E2E_P01ConfigType ConfigOK1 = {
        -:   70:        .DataLength = 16,
        -:   71:        .CounterOffset = 4,
        -:   72:        .CRCOffset = 8
        -:   73:    };
        -:   74:
        -:   75://---------------------------------
        1:   76:  TEST_CHECK(E2E_P01Check(&ConfigOK1, NULL, data) == E2E_E_INPUTERR_NULL);
        -:   77://---------------------------------
        1:   78:  TEST_CHECK(E2E_P01Check(&ConfigOK1, &State, NULL) == E2E_E_INPUTERR_NULL);
        -:   79:	
        1:   80:	Std_ReturnType result = E2E_P01Check(&ConfigOK1, &State, dataOK);
        -:   81:
        -:   82://---------------------------------
        1:   83:	TEST_CHECK(result == E2E_E_OK);
        -:   84://---------------------------------
        1:   85:	TEST_CHECK(dataOK[ConfigOK1.CounterOffset / 8] == 0);
        -:   86://---------------------------------
        1:   87:	E2E_P01ConfigType ConfigOK2 = {
        -:   88:        .DataLength = 32,
        -:   89:        .CounterOffset = 16,
        -:   90:        .CRCOffset = 8
        -:   91:    };
        -:   92:	
        1:   93:  E2E_P01ReceiverStateType State2 = {
        -:   94:    .LastValidCounter = 1,
        -:   95:    .MaxDeltaCounter = 2,
        -:   96:    .WaitForFirstData = 0,
        -:   97:    .NewDataAvailable = 1,
        -:   98:    .LostData = 0
        -:   99:  };
        -:  100:
        1:  101:	result = E2E_P01Check(&ConfigOK2, &State2, dataOK);
        1:  102:	TEST_CHECK(result == E2E_E_OK);
        -:  103://---------------------------------
        1:  104:	E2E_P01ConfigType ConfigOK3 = {
        -:  105:        .DataLength = 32,
        -:  106:        .CounterOffset = 16,
        -:  107:        .CRCOffset = 8
        -:  108:    };
        -:  109:	
        1:  110:  E2E_P01ReceiverStateType State3 = {
        -:  111:    .LastValidCounter = 1,
        -:  112:    .MaxDeltaCounter = 2,
        -:  113:    .WaitForFirstData = 0,
        -:  114:    .NewDataAvailable = 1,
        -:  115:    .LostData = 0
        -:  116:  };
        -:  117:
        1:  118:	result = E2E_P01Check(&ConfigOK3, &State3, dataOK);
        -:  119:	
        1:  120:	TEST_CHECK(result == E2E_E_OK);
        -:  121://---------------------------------
        1:  122:	E2E_P01ConfigType ConfigOK4 = {
        -:  123:        .DataLength = 32,
        -:  124:        .CounterOffset = 4,
        -:  125:        .CRCOffset = 16
        -:  126:    };
        -:  127:	
        1:  128:  E2E_P01ReceiverStateType State4 = {
        -:  129:    .LastValidCounter = 1,
        -:  130:    .MaxDeltaCounter = 2,
        -:  131:    .WaitForFirstData = 0,
        -:  132:    .NewDataAvailable = 1,
        -:  133:    .LostData = 0
        -:  134:  };
        -:  135:
        1:  136:	result = E2E_P01Check(&ConfigOK4, &State4, dataOK);
        -:  137:	
        1:  138:	TEST_CHECK(result == E2E_E_OK);
        -:  139://---------------------------------
        1:  140:	E2E_P01ConfigType ConfigOK5 = {
        -:  141:    .DataLength = 32,
        -:  142:    .CounterOffset = 4,
        -:  143:    .CRCOffset = 16,
        -:  144:    .DataID = 256,
        -:  145:    .DataIDMode = E2E_P01_DATAID_LOW,
        -:  146:    .MaxDeltaCounterInit = 0
        -:  147:
        -:  148:  };
        -:  149:	
        1:  150:  E2E_P01ReceiverStateType State5 = {
        -:  151:    .LastValidCounter = 1,
        -:  152:    .MaxDeltaCounter = 2,
        -:  153:    .WaitForFirstData = 0,
        -:  154:    .NewDataAvailable = 1,
        -:  155:    .LostData = 0
        -:  156:  };
        -:  157:
        1:  158:	result = E2E_P01Check(&ConfigOK5, &State5, data);
        -:  159:	
        1:  160:	TEST_CHECK(result == E2E_E_OK);
        -:  161:
        1:  162:}
        -:  163:
        -:  164:/**=============================================================================*/
        -:  165:/**
        -:  166:  @brief Test of E2E_P01_CalculateCRC
        -:  167:**/
        -:  168:/**=============================================================================*/
        1:  169:void Test_Of_E2E_P01_CalculateCRC(void)
        -:  170:{
        -:  171:	
        -:  172:	E2E_P01ConfigType Config;
        1:  173:    Config.CounterOffset = 3 * 8;
        1:  174:	Config.CRCOffset = 0;
        1:  175:	Config.DataIDMode = E2E_P01_DATAID_BOTH;
        1:  176:	Config.DataLength = 2 * 8;
        1:  177:	Config.MaxDeltaCounterInit = 3;
        -:  178:
        1:  179:	uint8_t data[8] = {0, 1, 2, 3, 4, 5, 6, 7};
        1:  180:	uint8_t crcResult = E2E_P01_CalculateCRC(&Config, 0, data);
        1:  181:  printf("%d",&crcResult);
        1:  182:	TEST_CHECK(crcResult == 228);
        -:  183:
        1:  184:	Config.DataIDMode = E2E_P01_DATAID_LOW;
        1:  185:	crcResult = E2E_P01_CalculateCRC(&Config, 0, data);
        1:  186:  printf("%d",&crcResult);
        1:  187:	TEST_CHECK(crcResult == 131);
        -:  188:	
        1:  189:	Config.DataIDMode = E2E_P01_DATAID_ALT;
        1:  190:	crcResult = E2E_P01_CalculateCRC(&Config, 0, data);
        1:  191:  printf("%d",&crcResult);
        1:  192:	TEST_CHECK(crcResult == 131);
        -:  193:	
        1:  194:	Config.DataIDMode = E2E_P01_DATAID_ALT;
        1:  195:	crcResult = E2E_P01_CalculateCRC(&Config, 1, data);
        1:  196:  printf("%d",&crcResult);  
        1:  197:	TEST_CHECK(crcResult == 232);
        -:  198:	
        1:  199:	Config.DataIDMode = E2E_P01_DATAID_NIBBLE;
        1:  200:	crcResult = E2E_P01_CalculateCRC(&Config, 0, data);
        1:  201:  printf("%d",&crcResult);
        1:  202:	TEST_CHECK(crcResult == 213);
        -:  203:	
        1:  204:	Config.CRCOffset = 8;
        1:  205:	crcResult = E2E_P01_CalculateCRC(&Config, 0, data);
        1:  206:  printf("%d",&crcResult);
        1:  207:	TEST_CHECK(crcResult == 200);
        -:  208:	
        1:  209:}
        -:  210:
        -:  211:/**=============================================================================*/
        -:  212:/**
        -:  213:  @brief Test of E2E_UpdateCounter
        -:  214:**/
        -:  215:/**=============================================================================*/
        1:  216:void Test_Of_E2E_UpdateCounter(void)
        -:  217:{
        -:  218:    /* Test for valid range 0-14 */
        1:  219:    TEST_CHECK(E2E_UpdateCounter(0) == 1);
        1:  220:    TEST_CHECK(E2E_UpdateCounter(7) == 8);
        1:  221:    TEST_CHECK(E2E_UpdateCounter(14) == 0);
        -:  222:
        -:  223:    /* Test for invalid input (greater than 14) */
        1:  224:    TEST_CHECK(E2E_UpdateCounter(15) == 1);
        1:  225:    TEST_CHECK(E2E_UpdateCounter(20) == 6);
        1:  226:}
        -:  227:
        -:  228:/**=============================================================================*/
        -:  229:/**
        -:  230:  @brief Test of CalculateDeltaCounter
        -:  231:**/
        -:  232:/**=============================================================================*/
        1:  233:void Test_Of_CalculateDeltaCounter(void)
        -:  234:{
        -:  235:    /* Test for receivedCounter >= lastValidCounter */
        1:  236:    TEST_CHECK(CalculateDeltaCounter(8, 5) == 3);
        1:  237:    TEST_CHECK(CalculateDeltaCounter(5, 5) == 0);
        1:  238:    TEST_CHECK(CalculateDeltaCounter(0, 14) == 1);
        -:  239:
        -:  240:    /* Test for receivedCounter < lastValidCounter */
        1:  241:    TEST_CHECK(CalculateDeltaCounter(5, 8) == 12);
        1:  242:    TEST_CHECK(CalculateDeltaCounter(14, 0) == 14);
        1:  243:}
        -:  244:
        -:  245:/**=============================================================================*/
        -:  246:/**
        -:  247:  @brief Test for CheckConfig with NULL Config
        -:  248:**/
        -:  249:/**=============================================================================*/
        1:  250:void Test_CheckConfig(void) {
        1:  251:    Std_ReturnType result = CheckConfig(NULL);
        1:  252:    TEST_CHECK(result == E2E_E_INPUTERR_NULL);
        -:  253:
        1:  254:    E2E_P01ConfigType ConfigOK = {
        -:  255:        .DataLength = 16,
        -:  256:        .CounterOffset = 4,
        -:  257:        .CRCOffset = 8
        -:  258:    };
        -:  259:
        1:  260:    result = CheckConfig(&ConfigOK);
        1:  261:    TEST_CHECK(result == E2E_E_OK);
        -:  262:
        1:  263:    E2E_P01ConfigType ConfigInvalidDataLength = {
        -:  264:        .DataLength = 17,
        -:  265:        .CounterOffset = 4,
        -:  266:        .CRCOffset = 8
        -:  267:    };
        -:  268:
        1:  269:    result = CheckConfig(&ConfigInvalidDataLength);
        1:  270:    TEST_CHECK(result == E2E_E_INPUTERR_WRONG);
        -:  271:
        1:  272:    E2E_P01ConfigType ConfigInvalidCounterOffset = {
        -:  273:        .DataLength = 16,
        -:  274:        .CounterOffset = 3,
        -:  275:        .CRCOffset = 8
        -:  276:    };
        -:  277:
        1:  278:    result = CheckConfig(&ConfigInvalidCounterOffset);
        1:  279:    TEST_CHECK(result == E2E_E_INPUTERR_WRONG);
        -:  280:
        1:  281:    E2E_P01ConfigType ConfigOverlappingOffsets = {
        -:  282:        .DataLength = 0,
        -:  283:        .CounterOffset = 16,
        -:  284:        .CRCOffset = 16
        -:  285:    };
        -:  286:
        1:  287:    result = CheckConfig(&ConfigOverlappingOffsets);
        1:  288:    TEST_CHECK(result == E2E_E_INPUTERR_WRONG);
        1:  289:}
        -:  290:
        -:  291:/**=============================================================================*/
        -:  292:/*
        -:  293:  Lista testów 
        -:  294:*/
        -:  295:/**=============================================================================*/
        -:  296:TEST_LIST = 
        -:  297:{
        -:  298:  { "Test of E2E_P01Protect", Test_Of_E2E_P01Protect },
        -:  299:  { "Test of E2E_P01Check", Test_Of_E2E_P01Check },
        -:  300:  { "Test of Test_Of_E2E_P01_CalculateCRC", Test_Of_E2E_P01_CalculateCRC },
        -:  301:	{ "Test of E2E_UpdateCounter", Test_Of_E2E_UpdateCounter },
        -:  302:	{ "Test of CalculateDeltaCounter", Test_Of_CalculateDeltaCounter },
        -:  303:	{ "Test of CheckConfig", Test_CheckConfig },
        -:  304:  { NULL, NULL }                                      
        -:  305:};
